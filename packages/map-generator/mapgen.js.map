{"version": 3, "mappings": "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", "sources": ["mapgen.py"], "names": ["this.parameters", "random", "random.random", "random.randint", "this.seed", "this.init_parameters", "this.data", "random.seed", "seeds", "this.createArray", "this.randomize", "this.speleogenesis", "this.cleanup", "this.fillExtra", "this.details", "i", "j", "this.heightMap", "this.flood", "range", "this.aSlimySlugIsInvadingYourBase", "this.addSeams", "this.addRechargeSeams", "this.createFlowList", "this.aLandslideHasOccured", "this.chooseBase", "this.setBase", "array", "array.length", "array[0].length", "density", "resourceArray", "seam_type", "rand", "landslideArray", "stability", "landslideList", "landslideList[(landslideArray[i][j] - 1)].append", "slugDensity", "possibleBaseList", "possibleBaseList.append", "possibleBaseList.length", "changed", "crystalCount", "this.countAccessibleCrystals", "MMtext", "this.data[\"wall_array\"].length", "this.data[\"wall_array\"][0].length", "conversion", "converted_walls", "caveList", "this.findCaves", "cave", "space", "converted_walls.length", "converted_walls[0].length", "this.data[\"height_array\"].length", "this.data[\"height_array\"][0].length", "min", "this.data[\"landslide_list\"].length", "this.data[\"landslide_list\"][(i - 1)].length", "this.data[\"flow_list\"].length", "this.data[\"flow_list\"][(i - 1)].length", "spaces", "base", "tmap", "types", "vehicles", "spaces.length", "x", "y", "spaces.append", "count", "crystalArray", "fill", "flowArray", "spillList", "sources", "sources.append", "source", "flowList", "flowList.length", "adjacent", "sourceElevation", "height", "elevation", "terrain", "flowList.append", "spillList.append", "preFlow", "totalSources", "sources.length", "maxDistance", "n", "this.openSpaces", "spaces.sort", "len", "spaces.pop", "coord", "max", "squareSize", "length", "width", "k", "l", "array[k][l]", "value", "caveList.length", "caveList.pop", "floodType", "minimum", "heightArray", "maximum", "difference", "floodHeight", "floodLevel", "smoothness", "this.fillSquare", "index", "space.append", "space.length", "corners", "probability", "average"], "sourcesContent": ["import random\n\n\nclass Mapgen:\n\n    def init_parameters(self):\n        self.parameters = {\n            # How long to make the map\n            \"length\":               32,\n            # How wide to make the map\n            \"width\":                32,\n            # Overrides length and width\n            \"size\":                 32,\n            # How much solid rock to generate\n            \"solidDensity\":         random.random() * 0.3 + 0.2,\n            # How much other rock to generate\n            \"wallDensity\":          random.random() * 0.3 + 0.3,\n            \"oreDensity\":           random.random() * 0.3 + 0.3,    # How common ore is\n            # How common energy crystals are\n            \"crystalDensity\":       random.random() * 0.3 + 0.2,\n            \"oreSeamDensity\":       random.random() * 0.25,         # How common ore seams are\n            # How common energy crystal seams are\n            \"crystalSeamDensity\":   random.random() * 0.5,\n            # How common recharge seams are\n            \"rechargeSeamDensity\":  random.random() * 0.08 + 0.01,\n            # The height to be flooded with water or lava\n            \"floodLevel\":           random.random() * 0.75,\n            # Whether to flood with water or lava\n            \"floodType\":            [\"water\", \"lava\"][random.randint(0, 1)],\n            # How common erosion sources are\n            \"flowDensity\":          random.random() * 0.005,\n            # How slow erosion spreads\n            \"flowInterval\":         random.randint(20, 180),\n            # How much erosion should spread before the level starts\n            \"preFlow\":              random.randint(3, 8),\n            # How common landslide sources are\n            \"landslideDensity\":     random.random() * 0.4,\n            # How long between landslides\n            \"landslideInterval\":    random.randint(10, 90),\n            # How common slimy slug holes are\n            \"slugDensity\":          random.random() * 0.01,\n            # How much the height of the terrain varies\n            \"terrain\":              random.randint(0, 25),\n            # Which biome to use\n            \"biome\":                [\"ice\", \"rock\", \"lava\"][random.randint(0, 2)],\n            \"smoothness\":           16,          # How smoothly the terrain slopes\n            \"oxygen\":               0 - 1,       # How much oxygen to start with\n            \"stats\":                False,        # Whether to show the statistics\n            \"save\":                 False,        # Whether to save the file\n            \"name\":                 'Untitled',  # What to name the file\n            \"overwrite\":            False,       # Whether to overwrite an existing level\n            # Whether to show the map, does not work on Windows\n            \"show\":                 False,\n        }\n\n    def __init__(self):\n        self.seed = random.random()\n        self.init_parameters()\n        self.data = {}\n\n    def mapgen(self):\n\n        # Load the seed\n        random.seed(self.seed)\n        seeds = {\n            \"solid_seed\": random.random(),\n            \"other_seed\": random.random(),\n            \"ore_seed\": random.random(),\n            \"crystal_seed\": random.random(),\n            \"height_seed\": random.random(),\n            \"slug_seed\": random.random(),\n            \"ecs_seed\": random.random(),\n            \"os_seed\": random.random(),\n            \"rs_seed\": random.random(),\n            \"erosion_seed\": random.random(),\n            \"landslide_seed\": random.random(),\n            \"base_seed\": random.random(),\n        }\n\n        # Set length and width\n        if self.parameters[\"size\"]:\n            # Round up to the next chunk\n            self.parameters[\"size\"] = int(\n                (self.parameters[\"size\"] + 7) / 8) * 8\n            self.parameters[\"length\"] = self.parameters[\"size\"]\n            self.parameters[\"width\"] = self.parameters[\"size\"]\n\n        # Optionally set oxygen\n        if self.parameters[\"oxygen\"] == -1:\n            self.parameters[\"oxygen\"] = self.parameters[\"length\"] * \\\n                self.parameters[\"width\"] * 3\n\n        # Create feature maps\n        self.data[\"solid_array\"] = self.createArray(\n            self.parameters[\"length\"], self.parameters[\"width\"], -1)  # Solid rock\n        self.data[\"wall_array\"] = self.createArray(\n            self.parameters[\"length\"], self.parameters[\"width\"], -1)  # Other rock\n\n        # Create the solid rock\n        random.seed(seeds[\"solid_seed\"])\n        self.randomize(self.data[\"solid_array\"], 1 -\n                       self.parameters[\"solidDensity\"])\n        self.speleogenesis(self.data[\"solid_array\"])\n        self.cleanup(self.data[\"solid_array\"])\n        self.fillExtra(self.data[\"solid_array\"])\n\n        # Create the other rocks\n        random.seed(seeds[\"other_seed\"])\n        self.randomize(self.data[\"wall_array\"], 1 -\n                       self.parameters[\"wallDensity\"])\n        self.speleogenesis(self.data[\"wall_array\"])\n        self.cleanup(self.data[\"wall_array\"])\n        self.details(self.data[\"wall_array\"], 3)\n\n        # Merge the permnent and temporary features\n        for i in range(self.parameters[\"length\"]):\n            for j in range(self.parameters[\"width\"]):\n                if self.data[\"solid_array\"][i][j] == -1:\n                    self.data[\"wall_array\"][i][j] = 4\n\n        # Create ore\n        random.seed(seeds[\"ore_seed\"])\n        self.data[\"ore_array\"] = self.createArray(\n            self.parameters[\"length\"], self.parameters[\"width\"], -1)\n        self.randomize(self.data[\"ore_array\"], 1 -\n                       self.parameters[\"oreDensity\"])\n        self.speleogenesis(self.data[\"ore_array\"])\n        self.cleanup(self.data[\"ore_array\"])\n        self.details(self.data[\"ore_array\"], 4)\n\n        # Create crystals\n        random.seed(seeds[\"crystal_seed\"])\n        self.data[\"crystal_array\"] = self.createArray(\n            self.parameters[\"length\"], self.parameters[\"width\"], -1)\n        self.randomize(self.data[\"crystal_array\"], 1 -\n                       self.parameters[\"crystalDensity\"])\n        self.speleogenesis(self.data[\"crystal_array\"])\n        self.cleanup(self.data[\"crystal_array\"])\n        self.details(self.data[\"crystal_array\"], 5)\n\n        # Creat a height map\n        random.seed(seeds[\"height_seed\"])\n        self.data[\"height_array\"] = self.heightMap(\n            self.parameters[\"length\"] + 1, self.parameters[\"width\"] + 1, self.parameters[\"terrain\"], self.parameters[\"smoothness\"])\n\n        # Flood the low areas\n        self.flood(self.data[\"wall_array\"], self.data[\"height_array\"],\n                   self.parameters[\"floodLevel\"], self.parameters[\"floodType\"])\n\n        # Organize the maps\n        for i in range(self.parameters[\"length\"]):\n            for j in range(self.parameters[\"width\"]):\n                if self.data[\"wall_array\"][i][j] not in range(1, 4):\n                    self.data[\"crystal_array\"][i][j] = 0\n                    self.data[\"ore_array\"][i][j] = 0\n\n        # Slimy Slug holes\n        random.seed(seeds[\"slug_seed\"])\n        self.aSlimySlugIsInvadingYourBase(\n            self.data[\"wall_array\"], self.parameters[\"slugDensity\"])\n\n        # Energy Crystal Seams\n        random.seed(seeds[\"ecs_seed\"])\n        self.addSeams(self.data[\"wall_array\"], self.data[\"crystal_array\"],\n                      self.parameters[\"crystalSeamDensity\"], 10)\n\n        # Ore Seams\n        random.seed(seeds[\"os_seed\"])\n        self.addSeams(self.data[\"wall_array\"], self.data[\"ore_array\"],\n                      self.parameters[\"oreSeamDensity\"], 11)\n\n        # Recharge seams\n        random.seed(seeds[\"rs_seed\"])\n        self.addRechargeSeams(\n            self.data[\"wall_array\"], self.parameters[\"rechargeSeamDensity\"])\n\n        # Lava Flows / Erosion\n        random.seed(seeds[\"erosion_seed\"])\n        self.data[\"flow_list\"] = []\n        if self.parameters[\"floodType\"] == \"lava\":  # Lava\n            self.data[\"flow_list\"] = self.createFlowList(\n                self.data[\"wall_array\"],\n                self.parameters[\"flowDensity\"],\n                self.data[\"height_array\"],\n                self.parameters[\"preFlow\"],\n                self.parameters[\"terrain\"])\n\n        # Set unstable walls and landslide rubble\n        random.seed(seeds[\"landslide_seed\"])\n        self.data[\"landslide_list\"] = self.aLandslideHasOccured(\n            self.data[\"wall_array\"], self.parameters[\"landslideDensity\"])\n\n        # Set the starting point\n        random.seed(seeds[\"base_seed\"])\n        self.data[\"base\"] = self.chooseBase(self.data[\"wall_array\"])\n        if not self.data[\"base\"]:  # Make sure there is space to build\n            return False\n        self.setBase(\n            self.data[\"base\"], self.data[\"wall_array\"], self.data[\"height_array\"])\n\n        # Finally done\n        return True\n\n    # Add Energy Crystal and Ore seams\n\n    def addSeams(self, array, resourceArray, density, seam_type):\n        for i in range(len(array)):\n            for j in range(len(array[0])):\n                if random.random() < density:\n                    if resourceArray[i][j] > 2:\n                        array[i][j] = seam_type\n\n    # Add recharge seams in to replace solid rock\n\n    def addRechargeSeams(self, array, density):\n        for i in range(1, len(array) - 1):\n            for j in range(1, len(array[0]) - 1):\n\n                # Unconditional random for more consistency\n                rand = random.random() < density\n\n                # Only if the space is already solid rock\n                if array[i][j] == 4:  # Solid rock\n                    # Only if at least two opposite sides are solid rock\n                    if ((((array[i + 1][j] == 4) and\n                          (array[i - 1][j] == 4)) or\n                         ((array[i][j + 1] == 4) and\n                          (array[i][j - 1] == 4))) and\n                        # Only if at least one side is not solid rock\n                            ((array[i + 1][j] != 4) or\n                             (array[i - 1][j] != 4) or\n                             (array[i][j + 1] != 4) or\n                             (array[i][j - 1] != 4))):\n                        if rand:\n                            array[i][j] = 12  # Recharge seam\n\n    # A landslide has occured\n\n    def aLandslideHasOccured(self, array, stability):\n        landslideArray = self.createArray(len(array), len(array[0]), -1)\n        self.randomize(landslideArray, 1 - stability)\n        self.speleogenesis(landslideArray)\n        self.details(landslideArray, 3)\n\n        # Build the list\n        landslideList = [[], [], []]  # Three different landslide frequencies\n        for i in range(1, len(array) - 1):\n            for j in range(1, len(array[0]) - 1):\n                # Fill in rubble\n                if landslideArray[i][j] > 0 and array[i][j] == 0:  # Ground\n                    array[i][j] = 8  # Landslide rubble\n                # Landslides are possible here\n                if landslideArray[i][j] > 0 and array[i][j] in range(1, 4):\n                    landslideList[landslideArray[i][j] - 1].append((i, j))\n\n        return landslideList\n\n    # A Slimy Slug is invading your base!\n\n    def aSlimySlugIsInvadingYourBase(self, array, slugDensity):\n        for i in range(len(array)):\n            for j in range(len(array[0])):\n                # Randomly set Slimy Slug holes\n                if random.random() < slugDensity:\n                    if array[i][j] == 0:  # Ground\n                        array[i][j] = 9  # Slimy Slug hole\n\n    # Choose a starting point\n\n    def chooseBase(self, array):\n        # Find all possible starting points\n        possibleBaseList = []\n        for i in range(1, len(array) - 2):\n            for j in range(1, len(array[0]) - 2):\n                # Check for a 2x2 ground section to build on\n                if ((array[i][j] == 0) and\n                    (array[i + 1][j] == 0) and\n                    (array[i][j + 1] == 0) and\n                        (array[i + 1][j + 1] == 0)):\n                    possibleBaseList.append((i, j))\n\n        # Make sure there is somewhere to build\n        if len(possibleBaseList) == 0:\n            return False\n\n        # Choose one  TODO: Maybe add multiple bases or larger bases\n        return [possibleBaseList[random.randint(0, len(possibleBaseList) - 1)]][0]\n\n    # Clean up small map features\n\n    def cleanup(self, array):\n        changed = True\n        while changed == True:\n            changed = False\n            for i in range(1, len(array) - 1):\n                for j in range(1, len(array[0]) - 1):\n                    if (((array[i - 1][j] == 0) and (array[i + 1][j] == 0)) or ((array[i][j - 1] == 0) and (array[i][j + 1] == 0))):\n                        if array[i][j] != 0:\n                            array[i][j] = 0\n                            changed = True\n\n    # Convert to Manic Miners file format\n\n    def mm_text(self):\n\n        # Count all the crystals we can reach\n        crystalCount = self.countAccessibleCrystals(\n            self.data[\"wall_array\"], self.data[\"base\"], self.data[\"ore_array\"], False)\n        if crystalCount >= 14:  # More than enough crystals to get vehicles\n            crystalCount = self.countAccessibleCrystals(\n                self.data[\"wall_array\"], self.data[\"base\"], self.data[\"ore_array\"], True)\n\n        # Basic info\n        MMtext = (\n            'info{\\n' +\n            'rowcount:' + str(len(self.data[\"wall_array\"])) + '\\n' +\n            'colcount:' + str(len(self.data[\"wall_array\"][0])) + '\\n' +\n            'camerapos:Translation: X=' + str(self.data[\"base\"][1] * 300 + 300) +\n            ' Y=' + str(self.data[\"base\"][0] * 300 + 300) +\n            ' Z=' + str(self.data[\"height_array\"][self.data[\"base\"][0]][self.data[\"base\"][1]]) +\n            ' Rotation: P=44.999992 Y=180.000000 R=0.000000 Scale X=1.000 Y=1.000 Z=1.000\\n' +\n            'biome:' + self.parameters[\"biome\"] + '\\n' +\n            'creator:Map Generator for Manic Miners\\n' +\n            (('oxygen:' + str(self.parameters[\"oxygen\"]) + '/' + str(self.parameters[\"oxygen\"]) + '\\n') if self.parameters[\"oxygen\"] else '') +\n            'levelname:' + self.parameters[\"name\"] + '\\n' +\n            'erosioninitialwaittime:10\\n' +\n            '}\\n'\n        )\n\n        # Convert the tile numbers\n        MMtext += 'tiles{\\n'\n        conversion = {\n            0:  '1',   # Ground\n            1:  '26',  # Dirt\n            2:  '30',  # Loose Rock\n            3:  '34',  # Hard Rock\n            4:  '38',  # Solid Rock\n            6:  '11',  # Water\n            7:  '6',   # Lava\n            8:  '63',  # Landslide rubble\n            9:  '12',  # Slimy Slug hole\n            10: '42',  # Energy Crystal Seam\n            11: '46',  # Ore Seam\n            12: '50',  # Recharge Seam\n            13: '14',  # Building power path\n        }\n\n        # Apply the conversion\n        converted_walls = self.createArray(\n            len(self.data[\"wall_array\"]), len(self.data[\"wall_array\"][0]), None)\n        for i in range(len(self.data[\"wall_array\"])):\n            for j in range(len(self.data[\"wall_array\"][0])):\n                converted_walls[i][j] = conversion[self.data[\"wall_array\"][i][j]]\n\n        # List undiscovered caverns\n        caveList = self.findCaves(self.data[\"wall_array\"], self.data[\"base\"])\n\n        # Hide undiscovered caverns\n        for cave in caveList:\n            for space in cave:\n                converted_walls[space[0]][space[1]] = str(\n                    int(converted_walls[space[0]][space[1]]) + 100)\n\n        # Add to the file\n        for i in range(len(converted_walls)):\n            for j in range(len(converted_walls[0])):\n                MMtext += converted_walls[i][j] + ','\n            MMtext += '\\n'\n        MMtext += '}\\n'\n\n        # Add the heights\n        MMtext += 'height{\\n'\n        for i in range(len(self.data[\"height_array\"])):\n            for j in range(len(self.data[\"height_array\"][0])):\n                MMtext += str(self.data[\"height_array\"][i][j]) + ','\n            MMtext += '\\n'\n        MMtext += '}\\n'\n\n        # Add the resources\n        MMtext += 'resources{\\n'\n\n        # Crystals\n        MMtext += 'crystals:\\n'\n        for i in range(len(converted_walls)):\n            for j in range(len(converted_walls[0])):\n                MMtext += str(self.data[\"ore_array\"][i][j]) + ','\n            MMtext += '\\n'\n\n        # Ore\n        MMtext += 'ore:\\n'\n        for i in range(len(converted_walls)):\n            for j in range(len(converted_walls[0])):\n                MMtext += str(self.data[\"ore_array\"][i][j]) + ','\n            MMtext += '\\n'\n        MMtext += '}\\n'\n\n        # Objectives\n        MMtext += 'objectives{\\n'\n        # Collect half of the crystals, maximum of 999\n        MMtext += 'resources: ' + \\\n            str(min(int(crystalCount / 2), 999)) + ',0,0\\n'\n        MMtext += '}\\n'\n\n        # Buildings\n        MMtext += 'buildings{\\n'\n        MMtext += (\n            'BuildingToolStore_C\\n' +\n            'Translation: X=' + str(self.data[\"base\"][1] * 300 + 150.000) +\n            ' Y=' + str(self.data[\"base\"][0] * 300 + 150.000) +\n            ' Z=' + str(self.data[\"height_array\"][self.data[\"base\"][0]][self.data[\"base\"][1]] + (50 if 'udts' in self.parameters else 0)) +\n            ' Rotation: P=' + ('180' if 'udts' in self.parameters else '0') + '.000000 Y=89.999992 R=0.000000 Scale X=1.000 Y=1.000 Z=1.000\\n' +\n            'Level=1\\n' +\n            'Teleport=True\\n' +\n            'Health=MAX\\n' +\n            # X = chunk number\n            # Y = row within chunk\n            # Z = col within chunk\n            'Powerpaths=X=' + str(int(len(converted_walls[0]) / 8) * int(self.data[\"base\"][0] / 8) + int(self.data[\"base\"][1] / 8)) +\n            ' Y=' + str(self.data[\"base\"][0] % 8) +\n            ' Z=' + str(self.data[\"base\"][1] % 8) +\n            '/X=' + str(int(len(converted_walls[0]) / 8) * int((self.data[\"base\"][0] + 1) / 8) + int(self.data[\"base\"][1] / 8)) +\n            ' Y=' + str((self.data[\"base\"][0] + 1) % 8) +\n            ' Z=' + str(self.data[\"base\"][1] % 8) + '/\\n'\n        )\n        MMtext += '}\\n'\n\n        # A landslide has occured\n        MMtext += 'landslideFrequency{\\n'\n        for i in range(1, len(self.data[\"landslide_list\"]) + 1):\n            if len(self.data[\"landslide_list\"][i - 1]):\n                MMtext += str(i * self.parameters[\"landslideInterval\"]) + ':'\n            for space in self.data[\"landslide_list\"][i - 1]:\n                MMtext += str(space[1]) + ',' + str(space[0]) + '/'\n            if len(self.data[\"landslide_list\"][i - 1]):\n                MMtext += '\\n'\n        MMtext += '}\\n'\n\n        # Erosion\n        MMtext += 'lavaspread{\\n'\n        for i in range(1, len(self.data[\"flow_list\"]) + 1):\n            if len(self.data[\"flow_list\"][i - 1]):\n                MMtext += str(i * self.parameters[\"flowInterval\"]) + ':'\n            for space in self.data[\"flow_list\"][i - 1]:\n                MMtext += str(space[1]) + ',' + str(space[0]) + '/'\n            if len(self.data[\"flow_list\"][i - 1]):\n                MMtext += '\\n'\n        MMtext += '}\\n'\n\n        # Miners\n        MMtext += 'miners{\\n'\n        MMtext += '}\\n'\n\n        # Briefing\n        MMtext += 'briefing{\\n'\n        MMtext += 'You must collect ' + \\\n            str(min(int(crystalCount / 2), 999)) + ' energy crystals.  \\n'\n        MMtext += '}\\n'\n\n        return MMtext\n\n    # Count how many crystals we can actually get\n\n    def countAccessibleCrystals(self, array, base, crystalArray, vehicles):\n        spaces = [base]\n        tmap = self.createArray(len(array), len(array[0]), -1)\n\n        # Choose the types of tiles we can cross\n        types = [0, 1, 2, 3, 8, 9, 10, 11, 13]\n        if vehicles:  # With vehicles we can cross water and lava\n            types = [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 13]\n\n        # Mark which spaces could be accessible\n        for i in range(1, len(array) - 1):  # Leave a margin of 1\n            for j in range(1, len(array[0]) - 1):\n                if array[i][j] in types:\n                    tmap[i][j] = 0  # Accessible\n\n        tmap[base[0]][base[1]] = 1\n        i = 0\n        while i < len(spaces):\n            # Use shorter variable names for frequently used values\n            x = spaces[i][0]\n            y = spaces[i][1]\n\n            # Check each adjacent space\n            if tmap[x - 1][y] == 0:\n                tmap[x - 1][y] = 1\n                spaces.append((x - 1, y))\n            if tmap[x + 1][y] == 0:\n                tmap[x + 1][y] = 1\n                spaces.append((x + 1, y))\n            if tmap[x][y - 1] == 0:\n                tmap[x][y - 1] = 1\n                spaces.append((x, y - 1))\n            if tmap[x][y + 1] == 0:\n                tmap[x][y + 1] = 1\n                spaces.append((x, y + 1))\n\n            i += 1\n\n        # Count crystals in our list\n        count = 0\n        for space in spaces:\n            count += crystalArray[space[0]][space[1]]\n\n        return count\n\n    # Create an array and fill it with something\n\n    def createArray(self, x, y, fill):\n        array = [None] * x\n        for i in range(x):\n            array[i] = [None] * y\n            for j in range(y):\n                array[i][j] = fill\n\n        return array\n\n    # Create a list of lava flow spaces\n\n    def createFlowList(self, array, density, height, preFlow, terrain):\n        flowArray = self.createArray(len(array), len(array[0]), -1)\n        spillList = []\n        sources = []\n\n        # Find places where lava flows are possible\n        for i in range(len(array)):\n            for j in range(len(array[0])):\n                if random.random() < density:\n                    if array[i][j] == 0:\n                        sources.append((i, j))  # Possible lava source\n                if array[i][j] in range(4):\n                    flowArray[i][j] = 0  # Possible spill zone\n\n        # Start spilling from each source\n        for source in sources:\n            array[source[0]][source[1]] = 7  # Lava\n            flowList = [source]\n            flowArray[source[0]][source[1]] = 1  # Checked\n\n            # Find spill zones\n            i = 0\n            while i < len(flowList):\n                adjacent = [\n                    (flowList[i][0] + 1, flowList[i][1]),\n                    (flowList[i][0] - 1, flowList[i][1]),\n                    (flowList[i][0], flowList[i][1] + 1),\n                    (flowList[i][0], flowList[i][1] - 1),\n                ]\n\n                # Sum of all corners.  Not really elevation but close enough\n                sourceElevation = (\n                    (height[flowList[i][0]][flowList[i][1]]) +\n                    (height[flowList[i][0] + 1][flowList[i][1]]) +\n                    (height[flowList[i][0]][flowList[i][1] + 1]) +\n                    (height[flowList[i][0] + 1][flowList[i][1] + 1])\n                )\n\n                # Add to flowList if not checked and lower elevation\n                for space in adjacent:\n                    # Sum of all corners.  Not really elevation but close enough\n                    elevation = (\n                        (height[space[0]][space[1]]) +\n                        (height[space[0] + 1][space[1]]) +\n                        (height[space[0]][space[1] + 1]) +\n                        (height[space[0] + 1][space[1] + 1])\n                    )\n                    if flowArray[space[0]][space[1]] == 0 and sourceElevation > elevation - (terrain * 3):\n                        flowList.append(space)\n                        flowArray[space[0]][space[1]] = 1  # Checked\n                i += 1\n\n            # Add the flowList to the spillList\n            spillList.append(flowList)\n\n            # Clean up the array for reuse\n            for space in flowList:\n                flowArray[space[0]][space[1]] = 0\n\n        # Preflow the lavaflows so the sources are not just lonely lava squares\n        for i in range(preFlow):\n            totalSources = len(sources)\n            for j in range(totalSources):\n                adjacent = [\n                    (sources[j][0] + 1, sources[j][1]),\n                    (sources[j][0] - 1, sources[j][1]),\n                    (sources[j][0], sources[j][1] + 1),\n                    (sources[j][0], sources[j][1] - 1),\n                ]\n                for space in adjacent:\n                    if array[space[0]][space[1]] == 0:\n                        array[space[0]][space[1]] = 7  # Lava\n                        sources.append(space)\n\n        return spillList\n\n    # Set the details based on the distance from open areas\n\n    def details(self, array, maxDistance):\n        # Set type equal to distance from edge\n        for n in range(maxDistance):\n            for i in range(1, len(array) - 1):\n                for j in range(1, len(array[0]) - 1):\n                    if (((array[i - 1][j] == n or\n                          array[i + 1][j] == n or\n                          array[i][j - 1] == n or\n                          array[i][j + 1] == n))\n                            and (array[i][j] == -1)):\n                        array[i][j] = n + 1\n\n        # Fix anything we missed earlier\n        for i in range(1, len(array) - 1):\n            for j in range(1, len(array[0]) - 1):\n                if array[i][j] == -1:\n                    array[i][j] = maxDistance\n\n        # Randomly blur the values\n        for i in range(1, len(array) - 1):\n            for j in range(1, len(array[0]) - 1):\n                if array[i][j] >= 1:\n                    array[i][j] = random.randint(\n                        array[i][j] - 1, array[i][j] + 1)\n                    if array[i][j] <= 0:\n                        array[i][j] = 1\n                    if array[i][j] > maxDistance:\n                        array[i][j] = maxDistance\n\n    # Fill in all open areas except for the largest one\n\n    def fillExtra(self, array):\n\n        # Create the obstacle map\n        # 0:  Unchecked open space\n        # 1:  Checked open space\n        # -1: Obstacle\n        tmap = self.createArray(len(array), len(array[0]), 0)\n        for i in range(0, len(array)):\n            for j in range(0, len(array[0])):\n                if array[i][j] != 0:\n                    tmap[i][j] = -1\n\n        # Make a list of open spaces\n        spaces = self.openSpaces(tmap, False)\n\n        # Make sure the map even makes sense\n        if len(spaces) < 1:  # The map failed\n            return False\n\n        # Fill in all except the largest\n        spaces.sort(key=len, reverse=True)  # Move the largest to the front\n        spaces.pop(0)  # Remove the largest\n        for space in spaces:\n            for coord in space:\n                array[coord[0]][coord[1]] = -1\n\n        # Report that the map makes sense\n        return True\n\n    # Fill in a square section of an array\n\n    def fillSquare(self, i, j, array, length, width, squareSize, value):\n        # Loop through each space in the square and stay in bounds\n        for k in range(max(i, 0), min(i + squareSize, length)):\n            for l in range(max(j, 0), min(j + squareSize, width)):\n                array[k][l] += value\n\n    # Make a list of undiscovered caverns\n\n    def findCaves(self, array, base):\n        # Mark our obstacles\n        tmap = self.createArray(len(array), len(array[0]), -1)\n\n        # Mark the open spaces\n        for i in range(1, len(array)):\n            for j in range(1, len(array[0])):\n                if array[i][j] in [0, 6, 7, 8, 9, 13]:  # Open air spaces\n                    tmap[i][j] = 0\n\n        # Create the list of caverns\n        caveList = self.openSpaces(tmap, True)\n\n        # Find which cavern contains our base and remove it\n        for i in range(len(caveList)):\n            if base in caveList[i]:\n                caveList.pop(i)\n                break\n\n        return caveList\n\n    # Flood low areas with a specified liquid\n\n    def flood(self, array, heightArray, floodLevel, floodType):\n        length = len(array)\n        width = len(array[0])\n\n        if floodType == \"water\":\n            floodType = 6\n        else:\n            floodType = 7\n\n        # Find the flood height\n        minimum = heightArray[0][0]\n        maximum = heightArray[0][0]\n        for i in range(length + 1):\n            for j in range(width + 1):\n                maximum = max(heightArray[i][j], maximum)\n                minimum = min(heightArray[i][j], minimum)\n        difference = maximum - minimum\n        floodHeight = int(difference * floodLevel + minimum)\n\n        # Level anything below floodHeight\n        for i in range(length + 1):\n            for j in range(width + 1):\n                heightArray[i][j] = max(heightArray[i][j], floodHeight)\n\n        # Finally pour the lava! (or water)\n        for i in range(length):\n            for j in range(width):\n                if (array[i][j] == 0 and\n                    heightArray[i][j] == floodHeight and\n                    heightArray[i + 1][j] == floodHeight and\n                    heightArray[i][j + 1] == floodHeight and\n                        heightArray[i + 1][j + 1] == floodHeight):\n                    array[i][j] = floodType\n\n    # Create a height map\n\n    def heightMap(self, length, width, terrain, smoothness):\n        array = self.createArray(length, width, 0)\n\n        # Make sure the terrain value makes sense\n        terrain = max(terrain, 1)\n\n        # Loop through each square\n        for i in range(-smoothness, length, 1):\n            for j in range(-smoothness, width, 1):\n                # Sets of four overlapping squares\n                value = random.randint(-int(terrain), int(terrain))\n                self.fillSquare(i, j, array, length, width, smoothness, value)\n\n        return array\n\n    # Search for open spaces\n\n    def openSpaces(self, array, corners):\n        spaces = []  # List of lists of coordinates\n        for i in range(1, len(array) - 1):  # Leave a margin of 1\n            for j in range(1, len(array[0]) - 1):\n                if array[i][j] == 0:  # Open space found!\n                    array[i][j] = 1  # Mark the space\n                    space = []  # List of coordinates in the space\n                    index = 0\n                    space.append((i, j))\n                    while index < len(space):\n                        # Use shorter variable names for frequently used values\n                        x = space[index][0]\n                        y = space[index][1]\n\n                        # Check each adjacent space\n                        if array[x - 1][y] == 0:\n                            array[x - 1][y] = 1\n                            space.append((x - 1, y))\n                        if array[x + 1][y] == 0:\n                            array[x + 1][y] = 1\n                            space.append((x + 1, y))\n                        if array[x][y - 1] == 0:\n                            array[x][y - 1] = 1\n                            space.append((x, y - 1))\n                        if array[x][y + 1] == 0:\n                            array[x][y + 1] = 1\n                            space.append((x, y + 1))\n\n                        # Optionally also check the corners\n                        if corners:\n                            if array[x - 1][y - 1] == 0:\n                                array[x - 1][y - 1] = 1\n                                space.append((x - 1, y - 1))\n                            if array[x + 1][y - 1] == 0:\n                                array[x + 1][y - 1] = 1\n                                space.append((x + 1, y - 1))\n                            if array[x - 1][y + 1] == 0:\n                                array[x - 1][y + 1] = 1\n                                space.append((x - 1, y + 1))\n                            if array[x + 1][y + 1] == 0:\n                                array[x + 1][y + 1] = 1\n                                space.append((x + 1, y + 1))\n\n                        # Mark the current space as checked\n                        array[x][y] = 1\n\n                        # Move on to the next coordinate\n                        index += 1\n\n                    # # Add the list to the list of lists\n                    spaces.append(space)\n\n        return spaces\n\n    # Fill an array with random values\n\n    def randomize(self, array, probability):\n        for i in range(1, len(array) - 1):\n            for j in range(1, len(array[0]) - 1):\n                if random.random() < probability:\n                    array[i][j] = 0\n\n    # Set up the base at the chosen location\n\n    def setBase(self, base, array, height):\n        # Place building power paths under the tool store\n        array[base[0]][base[1]] = 13  # Building power path\n        array[base[0] + 1][base[1]] = 13  # Building power path\n\n        # Change geography to accomodate our buildings\n        average = int((height[base[0]][base[1]] +\n                       height[base[0] + 1][base[1]] +\n                       height[base[0]][base[1] + 1] +\n                       height[base[0] + 1][base[1] + 1])\n                      / 4)\n        average = int(average)\n        height[base[0]][base[1]] = average\n        height[base[0] + 1][base[1]] = average\n        height[base[0]][base[1] + 1] = average\n        height[base[0] + 1][base[1] + 1] = average\n\n    # Shape the random mess into caves\n\n    def speleogenesis(self, array):\n        changed = True\n        while changed:  # Run until nothing changes\n            changed = False\n            tmap = self.createArray(len(array), len(array[0]), 4)\n\n            # Copy the array\n            for i in range(len(array)):\n                for j in range(len(array[0])):\n                    tmap[i][j] = array[i][j]\n\n            # Decide which spaces to change\n            for i in range(1, len(array) - 1):\n                for j in range(1, len(array[0]) - 1):\n                    # Count adjacent spaces\n                    adjacent = 0\n                    if tmap[i + 1][j] == -1:\n                        adjacent += 1\n                    if tmap[i - 1][j] == -1:\n                        adjacent += 1\n                    if tmap[i][j + 1] == -1:\n                        adjacent += 1\n                    if tmap[i][j - 1] == -1:\n                        adjacent += 1\n\n                    # Change to empty if all neighbors are empty\n                    if adjacent == 0:\n                        if array[i][j] != 0:\n                            changed = True\n                            array[i][j] = 0\n\n                    # Change to filled if at least three neighbors are filled\n                    elif adjacent >= 3:\n                        if array[i][j] != -1:\n                            changed = True\n                            array[i][j] = -1\n"]}